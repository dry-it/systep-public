import { Component, OnInit, HostBinding, OnChanges } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { DataService } from '../../services/data.service';
import { Observable } from 'rxjs';
import {
  trigger,
  state,
  style,
  animate,
  transition,
  // ...
} from '@angular/animations';
import { AngularFireAuth } from '@angular/fire/auth';
import { FireBaseService } from '../../services/firebase.service';
import { Location } from '@angular/common';
import { FormGroup, FormControl } from '@angular/forms';
import { auditTime } from 'rxjs/operators';
import { StateService } from '../../services/state.service';
import { ElectronService } from 'app/core/services';

interface Activity {
  title: string;
  desc: string
  style: Style
  subActivities?: Activity[]
  hideSubActivities?: boolean
  blocks?: Block[]
  tools?: Tool[]
  owners?: Owner[]
}

interface Style {
  color: string;
  icon: string;
  arrow?: string;
}

interface CheckPoint {
  label: string
  state: boolean,
  action?: Action
  deletable?: boolean
}

interface Meeting {
  title: string
  participants: Participant[],
  date: Date
  protocol?: File,
}

interface Measurement {
  title: string
  subtitle: string
  type: string
  checkPoints: CheckPoint[]
}

interface Participant {
  name: string
  company: string
  position: string
}

interface Action {
  label: string,
  execute: string
}

interface Block {
  title: string
  type: string,
  checkPoints?: CheckPoint[]
  meeting?: Meeting
  blocks?: Block[]
  measurements?: Measurement[]
}

interface Tool {
  name: string,
  icon: string
}

interface Owner {
  icon: string
  name: string,
  bullets?: string[]
}

@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss'],
  animations: [
    trigger('openClose', [
      // ...
      state('open', style({
        width: '200px',
        height: '300px',
        marginRight: '2px'
      })),
      state('closed', style({
        width: '35px',
        height: '60px'
      })),
      transition('open => closed', [
        animate('0.2s')
      ]),
      transition('closed => open', [
        animate('0.2s')
      ]),
    ]),
    trigger('openCloseProject', [
      // ...
      state('open', style({
        width: '200px',
        minHeight: '400px',
        marginRight: '2px'
      })),
      state('closed', style({
        width: '35px',
        height: '30px'
      })),
      transition('open => closed', [
        animate('0.2s')
      ]),
      transition('closed => open', [
        animate('0.2s')
      ]),
    ]),
    trigger('openCloseImage', [
      // ...
      state('open', style({
        width: '100px',
        marginLeft: '5px',
        border: '5px #fff solid'
      })),
      state('closed', style({
        width: '20px',
        marginTop: '2px',
        border: 'none'
      })),
      transition('open => closed', [
        animate('0.5s')
      ]),
      transition('closed => open', [
        animate('0.5s')
      ]),
    ]),
    trigger('move', [
      // ...
      state('open', style({
        top: '365px',
      })),
      state('closed', style({
        top: '122px',
      })),
      transition('open => closed', [
        animate('0.2s')
      ]),
      transition('closed => open', [
        animate('0.2s')
      ]),
    ]),

  ]
})
export class HomeComponent implements OnInit {

  activities: Activity[]
  projects$: Observable<any>
  user$: Observable<any>

  searchForm = new FormGroup({
    term: new FormControl('')
  })

  constructor(
    private router: Router,
    private data: DataService,
    private auth: AngularFireAuth,
    private fireBaseService: FireBaseService,
    public _location: Location,
    public route: ActivatedRoute,
    private stateService: StateService,
    private electron: ElectronService) { }

  results: any

  profilePic$: Observable<any>

  hideSidebar: boolean
  currentProject$: Observable<any> = this.stateService.returnCurrentProject()

  mobileSidebar: boolean
  isElectron: boolean = this.electron.isElectron

  downloadLink: string = 'https://firebasestorage.googleapis.com/v0/b/systep-26719.appspot.com/o/files%2FSYSTEP%20Setup%201.0.1.exe?alt=media&token=49319892-5907-4710-b9e3-944426f6ef79'



  ngOnInit(): void {

    this.route.params.subscribe((res) => console.log(res))

    if (this.route.snapshot.paramMap.get('sHidden') === 'true') {
      this.hideSidebar = true
    }

    this.stateService.loadUsers()

    this.checkUser()

    this.searchForm.valueChanges
      .pipe(auditTime(500))
      .subscribe((result) => {
        if (result.term.length > 1) {
          this.fireBaseService.searchProjects(result.term)
            .subscribe((res) => {
              this.results = res;
            })
        } else {
          this.results = undefined
        }

      })


    this.user$ = this.stateService.returnCurrentUser()

    this.projects$ = this.fireBaseService.getCollectionSnapshot('projects')

    this.activities = [
      {
        title: 'Uppdrag  ',
        desc: 'Uppdraget tas emot och registreras i Pyramid (aff칛rssystem). Regionansvarig utser handl칛ggare, vilken 칛r knuten till en specifik uppdragsansvarig.',
        hideSubActivities: true,
        style: {
          color: 'dark',
          icon: 'none',
          arrow: ''
        },
        blocks: [
          {
            type: 'checkList',
            title: 'Checkpoints',
            checkPoints: [
              { label: 'Registrera projekt i pyramid', state: false },
              { label: 'Skapa projektmapp', state: true },
              { label: 'Skicka orderbekr칛ftelse', state: false, action: { label: 'Generera Orderbekr칛ftelse', execute: 'order' } }
            ]
          }
        ]
        ,
        owners: [
          { name: 'Uppdragsansvarig', icon: 'apple', bullets: ['Skapa projektmapp', 'Riskanalys uppr칛ttas', 'Se 칬ver resursbehov'] },
          { name: 'Handl칛ggare', icon: 'apple', bullets: ['游녣 G칬r som hen s칛ger!'] },
        ],
        tools: [
          {
            name: 'Rutinbeskrivning nytt uppdrag',
            icon: 'rocket'
          },
          {
            name: 'Rutinbeskrivning nytt uppdrag',
            icon: 'rocket'
          }
        ],
      },
      {
        title: 'Startm칬te / Kundkontakt',
        desc: 'Handl칛ggaren genomf칬r ett startm칬te d칛r uppdraget definieras och uppr칛ttar d칛refter en budget/prisuppskattning f칬r uppdraget.',
        style: {
          color: 'dark',
          icon: 'chalkboard-teacher',
          arrow: ''
        },
        blocks: [
          {
            type: 'checkList',
            title: 'Checkpoints',
            checkPoints: [
              { label: 'Boka startm칬te', state: false },
              { label: 'M칬te/Platsbes칬k', state: true },
              { label: 'Skriva m칬tesprotokoll', state: false, action: { label: 'Generera M칬tesprotokoll', execute: 'order' } }
            ]
          }
          ,
          {
            type: 'meeting',
            title: 'Startm칬te',
            meeting: {
              title: 'Startm칬te',
              date: new Date('2020-08-04'),
              participants: [
                { name: 'Jesper Martinsson', company: 'Dry-IT', position: 'Uppdragsansvarig' },
                { name: 'John Doe', company: 'Testbolaget AB', position: 'Platschef' },
              ]
            }
          }
        ]
      },
      {
        title: 'Uppdragsbekr칛ftelse',
        desc: 'N칛r kunden har best칛llt uppdraget bekr칛ftas det genom ett avtal som kunden uppr칛ttar alternativt uppr칛ttas det av Dry-IT:s uppdragsansvariga.',
        style: {
          color: 'dark',
          icon: 'envelope',
          arrow: ''
        },
        tools: [
          {
            name: 'Mall Uppdragsbekr칛ftelse',
            icon: 'envelope'
          }
        ]
      },
      {
        title: 'Genomf칬rande',
        desc: `Handl칛ggande konsulten utf칬r uppdraget enligt 칬verenskommet inneh친ll. Uppdraget kan avse nyproduktion och befintliga fastigheter. Arbetsmilj칬riskanalys ska genomf칬ras av uppdragsansvarig innan arbete p친b칬rjas. Uppdraget kan inneb칛ra att ta fram en plan f칬r t ex fuktkontroller samt utf칬ra de m칛tningar som 칛r 칬verenskomna.

        Resultat och analyser sammanst칛lls i en rapport/RBK-protokoll. I rapporten finns en bed칬mning av uppm칛tta resultat, eventuellt 친tg칛rdsf칬rslag.
        `,
        style: {
          color: 'primary',
          icon: 'tools',
          arrow: 'to'
        },
        blocks: [
          {
            type: 'measurement',
            title: 'M칛tningar',
            measurements: [
              {
                title: 'Hus A',
                subtitle: 'Trapphus 1',
                type: 'RBK',
                checkPoints: [
                  { label: 'Skicka Indatablankett', state: false },
                  { label: 'Boka Startm칬te', state: false },
                  { label: 'M칛tning utf칬rd', state: false, },
                  { label: 'Protokoll levererat', state: false, }
                ]
              },
              {
                title: 'Hus A',
                subtitle: 'Trapphus 2',
                type: 'RBK',
                checkPoints: [
                  { label: 'Skicka Indatablankett', state: false },
                  { label: 'Boka Startm칬te', state: false },
                  { label: 'M칛tning utf칬rd', state: false, },
                  { label: 'Protokoll levererat', state: false, }
                ]
              }
            ]
          }
        ]
      },
      {
        title: 'Fortsatt Uppdrag?',
        desc: 'Just enter some example description here!',
        style: {
          color: 'warning',
          icon: 'refresh',
          arrow: 'from'
        }
      },
      {
        title: 'Fakturering',
        desc: 'Fakturering sker enligt rutiner 칬verenskomna med uppdragsgivaren (vanligtvis l칬pande, men kan 칛ven vara m친nadsvis). Uppdragsansvarig godk칛nner fakturaunderlag utifr친n tidrapporter av involverade konsulter och administrationen fakturerar uppdraget.',
        style: {
          color: 'dark',
          icon: 'invoice',
          arrow: ''
        }
      },
      {
        title: 'Uppdraget avslutas',
        desc: 'Uppdragsansvarig eller handl칛ggande konsult avslutar uppdraget i Pyramid samt dokumenterar avvikelser i uppdraget eller f칬rb칛ttringspotentialer. Dokumentationen arkiveras elektroniskt. ',
        style: {
          color: 'success',
          icon: 'smile',
          arrow: ''
        }
      }
    ]
  }

  isOpen = false;
  isOpenProject = false;

  activated: boolean
  activate: boolean = true;

  toggleUser() {
    this.isOpen = !this.isOpen;
  }

  signOut() {
    this.auth.signOut()
      .then(() => {
        this.router.navigateByUrl('/login')
      })
  }

  toggleProject() {
    this.isOpenProject = !this.isOpenProject;
  }

  displayProjectMenu() {

    if (this.router.url.includes('projectview')) {
      return true
    }

  }

  addDummy() {
    const dummy = {
      name: 'This is a test',
      pNumber: 'P4321',
      owner: 'Jesper Martinsson',
      activities: this.activities
    }

    this.data.patch('project/5f2d3bdb2a7883725b161c19', dummy)
      .subscribe((res: any) => {
      })
  }

  checkUser() {
    this.auth.currentUser.then((u: any) => {
      if (u) {
        this.stateService.loadUser(u.uid);
        this.stateService.returnCurrentUser()
          .subscribe((user: any) => {
            if (user.profilePicture) {
              this.profilePic$ = this.fireBaseService.getImgUrl(user.profilePicture)
            }
          })
      }
      localStorage.uid = u.uid
      if (localStorage.getItem('activated') === u.uid) {
        this.activated = true;
        this.activate = false;
      } else {
        this.fireBaseService.getDocumentValueChanges('users', u.uid)
          .subscribe((user: any) => {
            if (user.active) {
              this.activated = true;
              this.activate = false;
              localStorage.setItem('activated', u.uid)
            } else {
              this.activate = true
            }
          })
      }
    })


  }


  openProject(id: string) {
    this.mobileSidebar = false;
    this.router.navigateByUrl(`/home/projectview/${id}/project`)
    this.searchForm.patchValue({ term: '' });
    this.results = undefined;
  }


}
